#!/usr/bin/env bash
# file: entrypoint

# shellcheck disable=SC2312 # Consider invoking this command separately to avoid masking its return value (or use '|| true' to ignore).


__FILE__="$(readlink -f "${BASH_SOURCE[0]}")"
__DIR__="$(dirname "${__FILE__}")"
__PWD__="$(pwd)"
DIR_PROJ="$(readlink -f "${__DIR__}/..")"
DIR_SRC="${DIR_PROJ}/src"
DIR_TESTS="${DIR_PROJ}/tests"

function env_vars {
    echo " -= Environment Variables =-"
    echo " __FILE__: ${__FILE__}"
    echo "  __DIR__: ${__DIR__}"
    echo "  __PWD__: ${__PWD__}"
    echo " DIR_PROJ: ${DIR_PROJ}"
    echo "  DIR_SRC: ${DIR_SRC}"
    echo "DIR_TESTS: ${DIR_TESTS}"
}

function unit-tests {
    # Change to directory with `.shunit2rc` file
    if ! cd "${DIR_PROJ}"; then
        printf "\x1b[91mFatal error:\x1b[31m could not change directory\x1b[0m" > /dev/stderr
        exit 1
    fi

    "${DIR_TESTS}/shunit2sl" "$@"
}

function coverage {
    # Change to directory with `.simplecov` and `.shunit2rc` files
    if ! cd "${DIR_PROJ}"; then
        printf "\x1b[91mFatal error:\x1b[31m could not change directory\x1b[0m" > /dev/stderr
        exit 1
    fi

    bashcov --skip-uncovered -- "${DIR_TESTS}/shunit2sl" "$@"
}

function shellchecks {
    # Change to directory with `.shellcheckrc` file
    if ! cd "${DIR_PROJ}"; then
        printf "\x1b[91mFatal error:\x1b[31m could not change directory\x1b[0m" > /dev/stderr
        exit 1
    fi

    shellcheck \
        "${DIR_SRC}"/bash-util-lib.sh \
        "${DIR_SRC}"/bash-util-lib.*.sh \
        "${DIR_TESTS}"/bash-util-lib.test.sh \
        "${DIR_TESTS}"/bash-util-lib.*.test.sh \
        "${DIR_TESTS}"/shunit2.*
}



if [[ "$#" -eq 0 ]]; then
    # No arguments provided
    bash
elif declare -F | awk '{print $3}' | grep -q "^$1$"; then
    # First provided argument is name of defined function
    "$@"
else
    # First provided argument is not name of defined function
    exec "$@"
fi
